{
    "cid": "Drush\\Commands\\core\\PhpCommands",
    "data": {
        "evaluate": {
            "schema": 4,
            "class": "Drush\\Commands\\core\\PhpCommands",
            "method_name": "evaluate",
            "mtime": 1628851240,
            "injected_classes": [],
            "name": "php:eval",
            "description": "Evaluate arbitrary php code after bootstrapping Drupal (if available).",
            "help": "",
            "aliases": [
                "eval",
                "ev",
                "php-eval"
            ],
            "annotations": {
                "command": "php:eval",
                "bootstrap": "max"
            },
            "example_usages": {
                "drush php:eval '$node = node_load(1); print $node-\u003etitle;'": "Loads node with nid 1 and then prints its title.",
                "drush php:eval \"file_unmanaged_copy(\\'$HOME\/Pictures\/image.jpg\\', \\'public:\/\/image.jpg\\');\"": "Copies a file whose path is determined by an environment's variable. Use of double quotes so the variable $HOME gets replaced by its value.",
                "drush php:eval \"node_access_rebuild();\"": "Rebuild node access permissions."
            },
            "return_type": null,
            "arguments": {
                "code": {
                    "description": "PHP code. If shell escaping gets too tedious, consider using the php:script command."
                }
            },
            "options": {
                "format": {
                    "description": "",
                    "default": "var_export"
                }
            }
        },
        "script": {
            "schema": 4,
            "class": "Drush\\Commands\\core\\PhpCommands",
            "method_name": "script",
            "mtime": 1628851240,
            "injected_classes": [],
            "name": "php:script",
            "description": "Run php a script after a full Drupal bootstrap.",
            "help": "A useful alternative to eval command when your php is lengthy or you\ncan't be bothered to figure out bash quoting. If you plan to share a\nscript with others, consider making a full Drush command instead, since\nthat's more self-documenting.  Drush provides commandline options to the\nscript via a variable called \u003cinfo\u003e$extra\u003c\/info\u003e.",
            "aliases": [
                "scr",
                "php-script"
            ],
            "annotations": {
                "command": "php:script",
                "topics": "docs:script",
                "bootstrap": "max",
                "throws": "\\Exception"
            },
            "example_usages": {
                "drush php:script example --script-path=\/path\/to\/scripts:\/another\/path": "Run a script named example.php from specified paths",
                "drush php:script -": "Run PHP code from standard input.",
                "drush php:script": "List all available scripts.",
                "drush php:script foo -- apple --cider": "Run foo.php script with argument \u003cinfo\u003eapple\u003c\/info\u003e and option \u003cinfo\u003ecider\u003c\/info\u003e. Note the \u003cinfo\u003e--\u003c\/info\u003e separator."
            },
            "return_type": null,
            "arguments": {
                "extra": {
                    "description": "",
                    "default": []
                }
            },
            "options": {
                "format": {
                    "description": "",
                    "default": "var_export"
                },
                "script-path": {
                    "description": "Additional paths to search for scripts, separated by : (Unix-based systems) or ; (Windows).",
                    "default": 2
                }
            }
        },
        "preHook": {
            "schema": 4,
            "class": "Drush\\Commands\\DrushCommands",
            "method_name": "preHook",
            "mtime": 1628851240,
            "injected_classes": [
                "Consolidation\\AnnotatedCommand\\CommandData"
            ],
            "name": "pre:hook",
            "description": "Persist commandData for use in primary command callback. Used by 'topic' commands.",
            "help": "",
            "aliases": [],
            "annotations": {
                "hook": "pre-command *"
            },
            "example_usages": [],
            "return_type": null,
            "arguments": {
                "commandData": {
                    "description": ""
                }
            },
            "options": []
        }
    },
    "created": 1632579118,
    "expire": 0
}